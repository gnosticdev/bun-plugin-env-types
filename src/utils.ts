import type { BunFile, Glob } from 'bun'

export async function createEnv({
	typeDefs,
	envDtsFile,
	timestamp,
}: {
	typeDefs: Map<string, string>
	envDtsFile: BunFile
	timestamp?: boolean
}) {
	const comment = timestamp ? new Date().toLocaleString() : ''
	const dtsContent = generateDtsString(typeDefs, comment)
	// clear the file up to the mod line
	const content = (await envDtsFile.text().catch(() => '')) ?? ''
	const modLine = content.indexOf(MOD_LINE)
	if (modLine !== -1) {
		// must concat old and new content bc Bun.write doesn't append
		const oldContent = content.slice(modLine, content.length)
		await Bun.write(envDtsFile, dtsContent + oldContent)
		return envDtsFile
	}

	// Write the env.d.ts file
	await Bun.write(envDtsFile, `${dtsContent + MOD_LINE}\n`)
	return envDtsFile
}
export function generateDtsString(
	typeDefs: Map<string, string>,
	timestamp?: string,
) {
	let defsContent = ''
	for (const [key, value] of typeDefs) {
		defsContent += `\t\t${key}: ${value}\n`
	}
	const timeString = timestamp
		? `// Generated by Bun plugin at ${timestamp}\n`
		: ''
	const dtsContent = `${timeString}declare namespace NodeJS {
    export interface ProcessEnv {
${defsContent}    }
}

`
	return dtsContent
}
export async function getEnvFiles(glob: Glob, ignore: string[]) {
	const files = await Array.fromAsync(glob.scan({ dot: true, absolute: false }))
	return files.filter((file) => !ignore.some((ig) => ig.endsWith(file)))
}
export const MOD_LINE = `
//---------------------------------------------------------------------//
//-----------------------ADD YOUR CODE BELOW---------------------------//
//---------------------------------------------------------------------//
`
