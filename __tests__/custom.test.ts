import { afterEach, beforeEach, describe, expect, test } from 'bun:test'
import envPlugin, { type PluginOptions } from '../src/plugin'
import { getEnvFiles } from '../src/plugin-utils'
import { TempBunDir, TempBunFile } from './utils'

type FullOptions = Required<Omit<PluginOptions, 'envFiles'>> &
	Pick<PluginOptions, 'envFiles'>

describe('custom options', async () => {
	const TEMP_DIR = 'tmp'
	let customOptions: FullOptions
	let envValidPath: string
	let envFiles: string[]
	beforeEach(async () => {
		await using envTestIgnore = await TempBunFile.create({
			filePath: '.env.test.ignore',
			contents: 'IGNORED_VAR=ignored',
		})

		await using envTestExample = await TempBunFile.create({
			filePath: '.env.test.example',
			contents: 'EXAMPLE_VAR=example',
		})
		await using envTestValid = await TempBunFile.create({
			filePath: '.env.test',
			contents: 'VALID_VAR=valid',
		})
		envValidPath = envTestValid.filePath
		console.log({ envValidPath })
		customOptions = {
			outFile: 'env.alt.d.ts', // this will be created after Bun.build
			glob: '.env.test*',
			ignore: [envTestIgnore.filePath, envTestExample.filePath],
			timestamp: false,
			verbose: true,
			importMetaEnv: true,
		} satisfies FullOptions

		await using tempDir = await TempBunDir.create(TEMP_DIR)
		const entry = await tempDir.addShellFile({
			name: 'entry.ts',
			contents: 'const hiThere = "hi there"\nconsole.log(hiThere)\n',
		})
		await Bun.build({
			entrypoints: [entry.filePath],
			plugins: [envPlugin(customOptions)],
			outdir: tempDir.path,
		})
		// 'create' the temp files by reading them
		envFiles = await getEnvFiles(
			new Bun.Glob(customOptions.glob),
			customOptions.ignore,
		)
	})

	afterEach(async () => {
		if (customOptions?.outFile) {
			await Bun.$`rm ${customOptions.outFile}`.quiet().nothrow()
		}
	})

	test('should build the env.alt.d.ts file', async () => {
		expect(Bun.file(customOptions.outFile).text()).resolves.toBeTypeOf('string')
	})

	test('ignore values', async () => {
		const contents = await Bun.file(customOptions.outFile).text()
		expect(contents).not.toInclude('IGNORED_VAR: string')
		expect(contents).not.toInclude('EXAMPLE_VAR: string')
	})

	test('should not have a timestamp', async () => {
		const contents = await Bun.file(customOptions.outFile).text()
		expect(contents).not.toInclude('// Generated by Bun plugin at')
	})

	test('glob should only include .env.test', async () => {
		expect(envFiles).toHaveLength(1)
	})

	test('should add ImportMetaEnv', async () => {
		const contents = await Bun.file(customOptions.outFile).text()
		expect(contents).toInclude('interface ImportMetaEnv')
	})
})
